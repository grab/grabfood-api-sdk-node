// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Currency } from './currency';
import { DineIn } from './dineIn';
import { OrderCampaign } from './orderCampaign';
import { OrderFeatureFlags } from './orderFeatureFlags';
import { OrderItem } from './orderItem';
import { OrderPrice } from './orderPrice';
import { OrderPromo } from './orderPromo';
import { OrderReadyEstimation } from './orderReadyEstimation';
import { Receiver } from './receiver';

/**
* A JSON object containing the order information. 
*/
export class Order {
    /**
    * The order\'s ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What\'s-the-difference-between-orderID-and-shortOrderNumber).
    */
    'orderID': string;
    /**
    * The GrabFood short order number. This is unique for each merchant per day. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What\'s-the-difference-between-orderID-and-shortOrderNumber).
    */
    'shortOrderNumber': string;
    /**
    * The merchant\'s ID that is in GrabFood\'s database.
    */
    'merchantID': string;
    /**
    * The merchant\'s ID that is on the partner\'s database.
    */
    'partnerMerchantID'?: string;
    /**
    * The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).
    */
    'paymentType': Order.PaymentTypeEnum;
    /**
    * The boolean value to indicate whether cutlery are needed or not. Refer to FAQs for more details about [cutlery](#section/Order/What-do-the-true-or-false-values-mean-for-cutlery).
    */
    'cutlery': boolean;
    /**
    * The UTC time that a consumer places the order, based on ISO_8601/RFC3339.
    */
    'orderTime': string;
    /**
    * The order submit time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.
    */
    'submitTime'?: Date;
    /**
    * The order complete time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.
    */
    'completeTime'?: Date;
    /**
    * The order scheduled time, based on ISO_8601/RFC3339. Empty for non-scheduled orders.
    */
    'scheduledTime'?: string;
    /**
    * The state of the order. Empty in Submit Order payload. Only present in the [List Orders](#tag/list-order) response. Refer to [Order States](#section/Order-states).
    */
    'orderState'?: string;
    'currency': Currency;
    'featureFlags': OrderFeatureFlags;
    /**
    * The ordered items in an array of JSON Object. 
    */
    'items': Array<OrderItem>;
    /**
    * The campaigns that are applicable for the order. `null` when there is no campaign applied. Only campaigns that are funded by merchants will be sent. 
    */
    'campaigns'?: Array<OrderCampaign> | null;
    /**
    * An array of promotion objects. `null` when there is no promo code applied. Only promotions that are funded by merchants will be sent.
    */
    'promos'?: Array<OrderPromo> | null;
    'price': OrderPrice;
    'dineIn'?: DineIn | null;
    'receiver'?: Receiver | null;
    'orderReadyEstimation'?: OrderReadyEstimation;
    /**
    * Membership ID for loyalty project. Only present for loyalty program partners. Empty if not applicable.
    */
    'membershipID'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "orderID",
            "baseName": "orderID",
            "type": "string"
        },
        {
            "name": "shortOrderNumber",
            "baseName": "shortOrderNumber",
            "type": "string"
        },
        {
            "name": "merchantID",
            "baseName": "merchantID",
            "type": "string"
        },
        {
            "name": "partnerMerchantID",
            "baseName": "partnerMerchantID",
            "type": "string"
        },
        {
            "name": "paymentType",
            "baseName": "paymentType",
            "type": "Order.PaymentTypeEnum"
        },
        {
            "name": "cutlery",
            "baseName": "cutlery",
            "type": "boolean"
        },
        {
            "name": "orderTime",
            "baseName": "orderTime",
            "type": "string"
        },
        {
            "name": "submitTime",
            "baseName": "submitTime",
            "type": "Date"
        },
        {
            "name": "completeTime",
            "baseName": "completeTime",
            "type": "Date"
        },
        {
            "name": "scheduledTime",
            "baseName": "scheduledTime",
            "type": "string"
        },
        {
            "name": "orderState",
            "baseName": "orderState",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "Currency"
        },
        {
            "name": "featureFlags",
            "baseName": "featureFlags",
            "type": "OrderFeatureFlags"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<OrderItem>"
        },
        {
            "name": "campaigns",
            "baseName": "campaigns",
            "type": "Array<OrderCampaign>"
        },
        {
            "name": "promos",
            "baseName": "promos",
            "type": "Array<OrderPromo>"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "OrderPrice"
        },
        {
            "name": "dineIn",
            "baseName": "dineIn",
            "type": "DineIn"
        },
        {
            "name": "receiver",
            "baseName": "receiver",
            "type": "Receiver"
        },
        {
            "name": "orderReadyEstimation",
            "baseName": "orderReadyEstimation",
            "type": "OrderReadyEstimation"
        },
        {
            "name": "membershipID",
            "baseName": "membershipID",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

export namespace Order {
    export enum PaymentTypeEnum {
        Cash = <any> 'CASH',
        Cashless = <any> 'CASHLESS',
        UnknownDefaultOpenApi = <any> '11184809'
    }
}
