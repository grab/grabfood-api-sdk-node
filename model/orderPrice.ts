// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
 * GrabFood
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A JSON object containing order\'s price in the minor unit format.
*/
export class OrderPrice {
    /**
    * Total item and modifier price (tax-inclusive) in the minor unit. ``` subtotal = Sum of all (item price * quantity) | 2550*1=2550 
    */
    'subtotal': number;
    /**
    * GrabFood\'s tax in the minor unit. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated). ``` tax = (subtotal + merchantChargeFee - merchantFundPromo) * Tax / (1+Tax) | (2550-475)*0.06/1.06=117 
    */
    'tax'?: number;
    /**
    * Any additional fee charged by merchant (tax-inclusive), which is 100% paid out to the merchant. Eg. Takeaway, packaging costs, dine-in charge. 
    */
    'merchantChargeFee'?: number;
    /**
    * GrabFood\'s promo fund in the minor unit. Calculated based on funded ratio. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.
    */
    'grabFundPromo'?: number;
    /**
    * The merchant\'s promo fund in the minor unit. Calculated based on funded ratio.
    */
    'merchantFundPromo'?: number;
    /**
    * The total amount promo applied to the basket items only (item level/order level) in the minor unit, excluding delivery fee. Only present when `paymentType: CASH` or `orderType: DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` basketPromo = (grabFundPromo + merchantFundPromo) | 300 + 475 = 775 
    */
    'basketPromo'?: number;
    /**
    * The delivery fee in the minor unit. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.
    */
    'deliveryFee'?: number;
    /**
    * The fee charged by GrabFood for order that does not meet a certain minimum order value. Only present when `paymentType:CASH` and `orderType:DeliveredByRestaurant`.
    */
    'smallOrderFee'?: number;
    /**
    * The total amount paid by the consumer in the minor unit, excluding some additional fees charged by GrabFood. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` eaterPayment = (subtotal + merchantChargeFee + deliveryFee) - (sum of all promo) | (2550+400)-775=2175 
    */
    'eaterPayment'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "subtotal",
            "baseName": "subtotal",
            "type": "number"
        },
        {
            "name": "tax",
            "baseName": "tax",
            "type": "number"
        },
        {
            "name": "merchantChargeFee",
            "baseName": "merchantChargeFee",
            "type": "number"
        },
        {
            "name": "grabFundPromo",
            "baseName": "grabFundPromo",
            "type": "number"
        },
        {
            "name": "merchantFundPromo",
            "baseName": "merchantFundPromo",
            "type": "number"
        },
        {
            "name": "basketPromo",
            "baseName": "basketPromo",
            "type": "number"
        },
        {
            "name": "deliveryFee",
            "baseName": "deliveryFee",
            "type": "number"
        },
        {
            "name": "smallOrderFee",
            "baseName": "smallOrderFee",
            "type": "number"
        },
        {
            "name": "eaterPayment",
            "baseName": "eaterPayment",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return OrderPrice.attributeTypeMap;
    }
}

